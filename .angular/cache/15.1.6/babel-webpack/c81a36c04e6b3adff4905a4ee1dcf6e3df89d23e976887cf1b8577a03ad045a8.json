{"ast":null,"code":"import { EventEmitter, ElementRef } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { debounceTime, mergeMap } from \"rxjs/operators\";\nimport { AutoCompleteComponent } from \"@acpaas-ui/ngx-forms\";\nimport { ContactPickerService } from \"./contact-picker.service\";\nimport withUniqueNames from \"./unique-names\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./contact-picker.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@acpaas-ui/ngx-forms\";\nfunction ContactPickerComponent_ng_template_3_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1[ctx_r2.differentiator]);\n  }\n}\nfunction ContactPickerComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 3);\n    i0.ɵɵtemplate(1, ContactPickerComponent_ng_template_3_small_1_Template, 2, 1, \"small\", 4);\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.formatLabel(item_r1), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.differentiator);\n  }\n}\n// ControlValueAccessor as per\n// https://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html\nexport let ContactPickerComponent = /*#__PURE__*/(() => {\n  class ContactPickerComponent {\n    constructor(personPickerService, element) {\n      this.personPickerService = personPickerService;\n      this.element = element;\n      /** Unique ID for the contact picker */\n      this.id = \"\";\n      /** what to show in the input field when blank */\n      this.placeholder = \"\";\n      /** minimum number of characters typed before search is triggered */\n      this.minLength = 2;\n      /** message to show when there are no hits */\n      this.noDataMessage = \"Geen resultaat gevonden\";\n      /** a value object property to show as differentiator (aside from name) */\n      this.differentiator = \"\";\n      /** how long to buffer keystrokes before requesting search results */\n      this.bufferInputMs = 500;\n      /** the event fired when the value changes */\n      this.valueChange = new EventEmitter();\n      /** used to implement ControlValueAccessor (see below) */\n      this.propagateChange = _ => {};\n    }\n    /**\n     * A set of fixed data to look through (instead of querying the url)\n     * Array, matches on name property, case-insensitive\n     */\n    set data(value) {\n      this._data = value;\n      // if the field hasn't been searching yet, secretly update its results list\n      if (this.autocomplete && !this.autocomplete.searching) {\n        this.resetSearchResults();\n      }\n    }\n    get data() {\n      return this._data;\n    }\n    /** Set the focus in the text field, selecting all text. */\n    focus() {\n      const nativeEl = this.element.nativeElement;\n      if (nativeEl && nativeEl.querySelector) {\n        const input = nativeEl.querySelector(\"input[type=text]\");\n        if (input) {\n          input.select();\n        }\n      }\n    }\n    ngOnInit() {\n      this.resetSearchResults();\n      // trigger an autocomplete search when the query string changes\n      Observable.create(observer => {\n        this.searchChange$ = observer;\n      }).pipe(debounceTime(this.bufferInputMs), mergeMap(search => this.personPickerService.getPeopleByQuery(this.data || this.url, search.toString()))).subscribe(results => {\n        this.searchResults = withUniqueNames(results);\n      });\n    }\n    /** revert the search results to the current value of the control */\n    resetSearchResults() {\n      // if there are only a few static items to look through\n      // show the possible results immediately on focus (without the user having to type)\n      if (this.data && this.data.length && this.data.length <= 20) {\n        this.searchResults = this.data;\n      } else {\n        this.searchResults = [];\n      }\n      // if an initial value is set, focusing+blurring the field\n      // should not clear the field\n      if (this.value && !this.searchResults.length) {\n        this.searchResults = [this.value];\n      }\n    }\n    onSearch(searchString) {\n      if (searchString.length >= this.minLength) {\n        this.searchChange$.next(searchString);\n      } else {\n        this.resetSearchResults();\n      }\n    }\n    onSelect(data) {\n      if (data instanceof Event) {\n        // do nothing: we don't respond to text selection events\n      } else {\n        this.writeValue(data);\n      }\n    }\n    formatLabel(input) {\n      const search = this.autocomplete.query;\n      const inputString = input.name || input.id || \"\";\n      const regEx = new RegExp(search, \"ig\");\n      return inputString.replace(regEx, match => \"<strong>\" + match + \"</strong>\");\n    }\n    // ControlValueAccessor interface\n    writeValue(value) {\n      this.value = value;\n      this.valueChange.emit(this.value);\n      if (this.propagateChange) {\n        this.propagateChange(this.value);\n      }\n      this.resetSearchResults();\n    }\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n    registerOnTouched() {}\n  }\n  ContactPickerComponent.ɵfac = function ContactPickerComponent_Factory(t) {\n    return new (t || ContactPickerComponent)(i0.ɵɵdirectiveInject(i1.ContactPickerService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  ContactPickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ContactPickerComponent,\n    selectors: [[\"aui-contact-picker\"]],\n    viewQuery: function ContactPickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(AutoCompleteComponent, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.autocomplete = _t.first);\n      }\n    },\n    inputs: {\n      url: \"url\",\n      id: \"id\",\n      placeholder: \"placeholder\",\n      minLength: \"minLength\",\n      noDataMessage: \"noDataMessage\",\n      differentiator: \"differentiator\",\n      value: \"value\",\n      bufferInputMs: \"bufferInputMs\",\n      data: \"data\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    decls: 4,\n    vars: 5,\n    consts: [[1, \"a-input\", \"m-contact-picker\"], [1, \"a-input__wrapper\"], [\"remote\", \"true\", \"clearInvalid\", \"true\", \"value\", \"id\", \"label\", \"name\", 3, \"id\", \"ngModel\", \"placeholder\", \"noResultsText\", \"results\", \"search\", \"select\"], [1, \"m-contact-picker__content\", 3, \"innerHTML\"], [\"class\", \"m-contact-picker__detail u-text-light u-no-margin u-margin-left-xs\", 4, \"ngIf\"], [1, \"m-contact-picker__detail\", \"u-text-light\", \"u-no-margin\", \"u-margin-left-xs\"]],\n    template: function ContactPickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"aui-auto-complete\", 2);\n        i0.ɵɵlistener(\"search\", function ContactPickerComponent_Template_aui_auto_complete_search_2_listener($event) {\n          return ctx.onSearch($event);\n        })(\"select\", function ContactPickerComponent_Template_aui_auto_complete_select_2_listener($event) {\n          return ctx.onSelect($event);\n        });\n        i0.ɵɵtemplate(3, ContactPickerComponent_ng_template_3_Template, 2, 2, \"ng-template\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n        i0.ɵɵproperty(\"ngModel\", ctx.value == null ? null : ctx.value.name)(\"placeholder\", ctx.placeholder)(\"noResultsText\", ctx.noDataMessage)(\"results\", ctx.searchResults);\n      }\n    },\n    dependencies: [i2.NgIf, i3.NgControlStatus, i3.NgModel, i4.AutoCompleteComponent],\n    encapsulation: 2\n  });\n  return ContactPickerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}