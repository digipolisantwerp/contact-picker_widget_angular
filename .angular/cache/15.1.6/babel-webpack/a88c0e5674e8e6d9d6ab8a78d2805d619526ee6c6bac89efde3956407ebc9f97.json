{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { of as observableOf } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContactPickerService = /*#__PURE__*/(() => {\n  class ContactPickerService {\n    constructor(http) {\n      this.http = http;\n    }\n    getPeopleByQuery(\n    /**\n     * If an array of values, it will search in that array.\n     * If a string, it will use that as URL for contacting the BFF,\n     * appending search=<search> as query argument.\n     */\n    dataSource, /** The string to search for */\n    search) {\n      if (Array.isArray(dataSource)) {\n        return observableOf(dataSource.filter(v => {\n          const name = v.name.toLowerCase();\n          const matchOn = search.toLowerCase();\n          return name.indexOf(matchOn) >= 0;\n        }));\n      } else if (typeof dataSource === \"string\") {\n        const uri = dataSource + (dataSource.indexOf(\"?\") < 0 ? \"?\" : \"&\") + \"search=\" + search;\n        return this.http.get(uri);\n      } else {\n        // should never happen\n        throw new TypeError('Unsupported dataSource type \"' + typeof dataSource + '\"');\n      }\n    }\n  }\n  ContactPickerService.ɵfac = function ContactPickerService_Factory(t) {\n    return new (t || ContactPickerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ContactPickerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactPickerService,\n    factory: ContactPickerService.ɵfac\n  });\n  return ContactPickerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}